{"version":3,"sources":["webpack:///./src/components/PartAndWhole.tsx","webpack:///./src/components/keypad/Keypad.tsx","webpack:///./src/util/questions.ts","webpack:///./src/pages/index.tsx","webpack:///./src/components/PressToStart.tsx","webpack:///./src/components/Results.tsx","webpack:///./src/components/Title.tsx","webpack:///./src/util/random.ts"],"names":["Orientation","keyboard","type","number","Keypad","keypadDisabled","enterDisabled","deleteDisabled","onKeyPress","rows","map","keyRow","index","key","className","disabled","onClick","undefined","characterForKey","orientationFromIndex","Top","Right","Bottom","Left","Blank","Phase","PartAndWhole","orientation","whole","part1","part2","lines","linesForOrientation","width","height","x1","y1","x2","y2","stroke","strokeWidth","PressToStart","onPress","level","Results","results","outOf","onPlayAgainPressed","score","reduce","acc","cur","Title","randomInt","between","and","Math","floor","random","generateQuestion","max","previousQuestion","blank","diceRoll","Whole","Part1","Part2","LEVELS","Game","useState","WaitingToStart","phase","setPhase","setLevel","setResults","currentQuestion","setCurrentQuestion","currentGuess","setCurrentGuess","showingFeedback","setShowingFeedback","maxAnswerDigits","length","processGuess","expected","question","expectedAnswerForQuestion","answerCorrect","questionsAnswered","setTimeout","InProgress","slice"],"mappings":"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","file":"component---src-pages-index-tsx-01414ac33bf254872410.js","sourcesContent":["import React from 'react';\n\nexport enum Orientation {\n  Top = 'top',\n  Right = 'right',\n  Bottom = 'bottom',\n  Left = 'left',\n}\n\nexport function orientationFromIndex(index: number) {\n  switch (index) {\n    case 0:\n    default:\n      return Orientation.Top;\n    case 1:\n      return Orientation.Right;\n    case 2:\n      return Orientation.Bottom;\n    case 3:\n      return Orientation.Left;\n  }\n}\n\nconst linesForOrientation = (orientation: Orientation) => {\n  switch (orientation) {\n    case Orientation.Top:\n      return [\n        [200, 50, 50, 250],\n        [200, 50, 350, 250],\n      ];\n    case Orientation.Right:\n      return [\n        [50, 50, 350, 150],\n        [50, 250, 350, 150],\n      ];\n    case Orientation.Bottom:\n      return [\n        [50, 50, 200, 250],\n        [350, 50, 200, 250],\n      ];\n    case Orientation.Left:\n      return [\n        [50, 150, 350, 50],\n        [50, 150, 350, 250],\n      ];\n  }\n};\n\nexport default function PartAndWhole({\n  orientation,\n  whole,\n  part1,\n  part2,\n}: {\n  orientation: Orientation;\n  whole: string;\n  part1: string;\n  part2: string;\n}) {\n  const lines = linesForOrientation(orientation);\n\n  return (\n    <div className=\"part-whole-container\">\n      <div className={`part-whole-box whole ${orientation}`}>{whole}</div>\n      <div className={`part-whole-box part1 ${orientation}`}>{part1}</div>\n      <div className={`part-whole-box part2 ${orientation}`}>{part2}</div>\n\n      <svg width=\"400\" height=\"300\">\n        <line\n          x1={lines[0][0]}\n          y1={lines[0][1]}\n          x2={lines[0][2]}\n          y2={lines[0][3]}\n          stroke=\"black\"\n          strokeWidth=\"5\"\n        />\n        <line\n          x1={lines[1][0]}\n          y1={lines[1][1]}\n          x2={lines[1][2]}\n          y2={lines[1][3]}\n          stroke=\"black\"\n          strokeWidth=\"5\"\n        />\n      </svg>\n    </div>\n  );\n}\n","import React from 'react';\n\ntype Key = NumberKey | { type: 'delete' } | { type: 'enter' };\n\ninterface NumberKey {\n  type: 'number';\n  number: number;\n}\n\nconst characterForKey = (key: Key) => {\n  switch (key.type) {\n    case 'delete':\n      return '←';\n    case 'enter':\n      return '✓';\n    case 'number':\n      return `${key.number}`;\n  }\n};\n\nconst keyboard: Key[][] = [\n  [\n    { type: 'number', number: 1 },\n    { type: 'number', number: 2 },\n    { type: 'number', number: 3 },\n    { type: 'number', number: 4 },\n    { type: 'number', number: 5 },\n    { type: 'delete' },\n  ],\n  [\n    { type: 'number', number: 6 },\n    { type: 'number', number: 7 },\n    { type: 'number', number: 8 },\n    { type: 'number', number: 9 },\n    { type: 'number', number: 0 },\n    { type: 'enter' },\n  ],\n];\n\nexport default function Keypad({\n  keypadDisabled,\n  enterDisabled,\n  deleteDisabled,\n  onKeyPress,\n}: {\n  keypadDisabled: boolean;\n  enterDisabled: boolean;\n  deleteDisabled: boolean;\n  onKeyPress: (key: Key) => void;\n}) {\n  const rows = keyboard.map((keyRow, index) => {\n    return (\n      <div key={index} className=\"keypad-row\">\n        {keyRow.map((key, index) => {\n          const disabled =\n            keypadDisabled ||\n            (key.type === 'enter' && enterDisabled) ||\n            (key.type === 'delete' && deleteDisabled);\n          return (\n            <div\n              key={index}\n              className={`button keypad-key ${key.type} ${\n                disabled ? 'disabled' : ''\n              }`}\n              onClick={!disabled ? () => onKeyPress(key) : undefined}\n            >\n              {characterForKey(key)}\n            </div>\n          );\n        })}\n      </div>\n    );\n  });\n\n  return <div className=\"keypad-container\">{rows}</div>;\n}\n","import {\n  Orientation as PartAndWholeOrientation,\n  orientationFromIndex,\n} from '@/components/PartAndWhole';\nimport { randomInt } from './random';\n\nexport enum Blank {\n  Whole,\n  Part1,\n  Part2,\n}\n\nexport interface Question {\n  orientation: PartAndWholeOrientation;\n  blank: Blank;\n  whole: number;\n  part1: number;\n  part2: number;\n}\n\nexport function expectedAnswerForQuestion(question: Question): number {\n  switch (question.blank) {\n    case Blank.Whole:\n      return question.whole;\n    case Blank.Part1:\n      return question.part1;\n    case Blank.Part2:\n      return question.part2;\n  }\n}\n\nexport function generateQuestion(\n  max: number,\n  previousQuestion?: Question,\n): Question {\n  const orientation = (() => {\n    let orientation: PartAndWholeOrientation;\n    while (true) {\n      orientation = orientationFromIndex(randomInt(0, 3));\n      if (!previousQuestion || orientation !== previousQuestion.orientation) {\n        break;\n      }\n    }\n\n    return orientation;\n  })();\n\n  const blank = (() => {\n    let blank: Blank;\n    while (true) {\n      const diceRoll = randomInt(0, 2);\n      blank =\n        diceRoll === 0\n          ? Blank.Whole\n          : diceRoll === 1\n          ? Blank.Part1\n          : Blank.Part2;\n      if (!previousQuestion || blank !== previousQuestion.blank) {\n        break;\n      }\n    }\n\n    return blank;\n  })();\n\n  const whole = randomInt(1, max);\n  const part1 = randomInt(0, whole);\n  const part2 = whole - part1;\n\n  return { orientation, blank, whole, part1, part2 };\n}\n","import Keypad from '@/components/keypad/Keypad';\nimport PartAndWhole from '@/components/PartAndWhole';\nimport PressToStart from '@/components/PressToStart';\nimport Results from '@/components/Results';\nimport Title from '@/components/Title';\nimport {\n  Blank,\n  expectedAnswerForQuestion,\n  generateQuestion,\n  Question,\n} from '@/util/questions';\nimport React, { useState } from 'react';\n\nenum Phase {\n  WaitingToStart,\n  InProgress,\n  Results,\n}\n\nconst LEVELS = [9, 20, 99];\n\nconst QUESTIONS_PER_ROUND = 10;\nconst RESULT_FEEDBACK_MS = 2000;\n\nexport default function Game() {\n  const [phase, setPhase] = useState(Phase.WaitingToStart);\n  const [level, setLevel] = useState<0 | 1 | 2>(2);\n  const [results, setResults] = useState<boolean[]>([]);\n  const [currentQuestion, setCurrentQuestion] = useState<Question | undefined>(\n    undefined,\n  );\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [showingFeedback, setShowingFeedback] = useState(false);\n\n  const maxAnswerDigits = `${LEVELS[level]}`.length;\n\n  function reset() {\n    setPhase(Phase.WaitingToStart);\n    setLevel(0);\n    setResults([]);\n    setCurrentQuestion(undefined);\n    setCurrentGuess('');\n  }\n\n  function processGuess() {\n    const expected = expectedAnswerForQuestion(currentQuestion);\n    const answerCorrect = currentGuess === `${expected}`;\n    const questionsAnswered = results.length + 1;\n\n    setResults([...results, answerCorrect]);\n    setShowingFeedback(true);\n    setCurrentGuess(answerCorrect ? '🥳' : '🤔');\n\n    setTimeout(() => {\n      if (questionsAnswered < QUESTIONS_PER_ROUND) {\n        setCurrentGuess('');\n        setCurrentQuestion(generateQuestion(LEVELS[level], currentQuestion));\n      } else {\n        setPhase(Phase.Results);\n      }\n\n      setShowingFeedback(false);\n    }, RESULT_FEEDBACK_MS);\n  }\n\n  return (\n    <main>\n      <Title />\n\n      {phase === Phase.WaitingToStart && (\n        <PressToStart\n          onPress={(level) => {\n            setLevel(level);\n            setCurrentQuestion(generateQuestion(LEVELS[level], undefined));\n            setPhase(Phase.InProgress);\n          }}\n        />\n      )}\n\n      {phase === Phase.InProgress && currentQuestion && (\n        <>\n          <PartAndWhole\n            orientation={currentQuestion.orientation}\n            whole={\n              currentQuestion.blank === Blank.Whole\n                ? currentGuess\n                : `${currentQuestion.whole}`\n            }\n            part1={\n              currentQuestion.blank === Blank.Part1\n                ? currentGuess\n                : `${currentQuestion.part1}`\n            }\n            part2={\n              currentQuestion.blank === Blank.Part2\n                ? currentGuess\n                : `${currentQuestion.part2}`\n            }\n          />\n\n          <Keypad\n            keypadDisabled={showingFeedback}\n            deleteDisabled={currentGuess.length === 0}\n            enterDisabled={currentGuess.length === 0}\n            onKeyPress={(key) => {\n              switch (key.type) {\n                case 'number': {\n                  if (currentGuess.length < maxAnswerDigits) {\n                    setCurrentGuess(`${currentGuess}${key.number}`);\n                  }\n                  break;\n                }\n                case 'delete': {\n                  if (currentGuess.length > 0) {\n                    setCurrentGuess(\n                      currentGuess.slice(0, currentGuess.length - 1),\n                    );\n                  }\n                  break;\n                }\n                case 'enter': {\n                  if (currentGuess.length > 0) {\n                    processGuess();\n                  }\n                  break;\n                }\n              }\n            }}\n          />\n        </>\n      )}\n\n      {phase === Phase.Results && (\n        <Results\n          results={results}\n          outOf={QUESTIONS_PER_ROUND}\n          onPlayAgainPressed={reset}\n        />\n      )}\n    </main>\n  );\n}\n","import React from 'react';\n\nexport default function PressToStart({\n  onPress,\n}: {\n  onPress: (level: 0 | 1 | 2) => void;\n}) {\n  return (\n    <div className=\"press-to-start-container\">\n      {[0, 1, 2].map((level: 0 | 1 | 2) => (\n        <div\n          key={level}\n          className=\"button press-to-start-button\"\n          onClick={() => {\n            onPress(level);\n          }}\n        >\n          Level {level + 1}\n        </div>\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Results({\n  results,\n  outOf,\n  onPlayAgainPressed,\n}: {\n  results: boolean[];\n  outOf: number;\n  onPlayAgainPressed: () => void;\n}) {\n  const score = results.reduce((acc, cur) => acc + (cur ? 1 : 0), 0);\n\n  return (\n    <div className=\"results-container\">\n      <div className=\"results-score\">\n        You scored <span className=\"numeral\">{score}</span> out of{' '}\n        <span className=\"numeral\">{outOf}</span>\n      </div>\n      <div className=\"button results-play-again\" onClick={onPlayAgainPressed}>\n        Play Again\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Title() {\n  return <h1>Parts & Wholes</h1>;\n}\n","export function randomInt(between: number, and: number) {\n  return Math.floor(Math.random() * (and - between) + between);\n}\n"],"sourceRoot":""}