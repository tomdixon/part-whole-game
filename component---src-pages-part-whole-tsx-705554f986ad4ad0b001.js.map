{"version":3,"sources":["webpack:///./src/components/PartAndWhole.tsx","webpack:///./src/util/partWhole/questions.ts","webpack:///./src/pages/partWhole.tsx"],"names":["Orientation","orientationFromIndex","index","Top","Right","Bottom","Left","PartAndWhole","orientation","whole","part1","part2","lines","linesForOrientation","wholeCorrectness","part1Correctness","part2Correctness","wholeText","length","part1Text","part2Text","className","width","height","x1","y1","x2","y2","stroke","strokeWidth","Blank","generateQuestion","max","previousQuestion","randomInt","blank","diceRoll","Whole","Part1","Part2","Phase","LEVELS","PartWhole","useState","WaitingToStart","phase","setPhase","level","setLevel","results","setResults","undefined","currentQuestion","setCurrentQuestion","currentGuess","setCurrentGuess","showingFeedback","setShowingFeedback","maxAnswerDigits","reset","processGuess","expected","question","expectedAnswerForQuestion","answerCorrect","questionsAnswered","setTimeout","Results","Header","title","backPressed","navigate","InProgress","LevelSelector","onPress","selectedLevel","Keypad","keypadDisabled","deleteDisabled","enterDisabled","onKeyPress","key","type","number","slice","outOf","onPlayAgainPressed"],"mappings":"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","file":"component---src-pages-part-whole-tsx-705554f986ad4ad0b001.js","sourcesContent":["import React from 'react';\n\nexport enum Orientation {\n  Top = 'top',\n  Right = 'right',\n  Bottom = 'bottom',\n  Left = 'left',\n}\n\nexport function orientationFromIndex(index: number) {\n  switch (index) {\n    case 0:\n    default:\n      return Orientation.Top;\n    case 1:\n      return Orientation.Right;\n    case 2:\n      return Orientation.Bottom;\n    case 3:\n      return Orientation.Left;\n  }\n}\n\nconst linesForOrientation = (orientation: Orientation) => {\n  switch (orientation) {\n    case Orientation.Top:\n      return [\n        [200, 50, 50, 250],\n        [200, 50, 350, 250],\n      ];\n    case Orientation.Right:\n      return [\n        [50, 50, 350, 150],\n        [50, 250, 350, 150],\n      ];\n    case Orientation.Bottom:\n      return [\n        [50, 50, 200, 250],\n        [350, 50, 200, 250],\n      ];\n    case Orientation.Left:\n      return [\n        [50, 150, 350, 50],\n        [50, 150, 350, 250],\n      ];\n  }\n};\n\nexport default function PartAndWhole({\n  orientation,\n  whole,\n  part1,\n  part2,\n}: {\n  orientation: Orientation;\n  whole: string;\n  part1: string;\n  part2: string;\n}) {\n  const lines = linesForOrientation(orientation);\n\n  const wholeCorrectness =\n    whole === 'correct' ? 'correct' : whole === 'incorrect' ? 'incorrect' : '';\n  const part1Correctness =\n    part1 === 'correct' ? 'correct' : part1 === 'incorrect' ? 'incorrect' : '';\n  const part2Correctness =\n    part2 === 'correct' ? 'correct' : part2 === 'incorrect' ? 'incorrect' : '';\n\n  const wholeText = wholeCorrectness.length ? '' : whole;\n  const part1Text = part1Correctness.length ? '' : part1;\n  const part2Text = part2Correctness.length ? '' : part2;\n\n  return (\n    <div className=\"part-whole-container\">\n      <div\n        className={`part-whole-box whole ${orientation} ${wholeCorrectness}`}\n      >\n        {wholeText}\n      </div>\n      <div\n        className={`part-whole-box part1 ${orientation} ${part1Correctness}`}\n      >\n        {part1Text}\n      </div>\n      <div\n        className={`part-whole-box part2 ${orientation} ${part2Correctness}`}\n      >\n        {part2Text}\n      </div>\n\n      <svg width=\"400\" height=\"300\">\n        <line\n          x1={lines[0][0]}\n          y1={lines[0][1]}\n          x2={lines[0][2]}\n          y2={lines[0][3]}\n          stroke=\"black\"\n          strokeWidth=\"5\"\n        />\n        <line\n          x1={lines[1][0]}\n          y1={lines[1][1]}\n          x2={lines[1][2]}\n          y2={lines[1][3]}\n          stroke=\"black\"\n          strokeWidth=\"5\"\n        />\n      </svg>\n    </div>\n  );\n}\n","import {\n  Orientation as PartAndWholeOrientation,\n  orientationFromIndex,\n} from '@/components/PartAndWhole';\nimport { randomInt } from '../random';\n\nexport enum Blank {\n  Whole,\n  Part1,\n  Part2,\n}\n\nexport interface Question {\n  orientation: PartAndWholeOrientation;\n  blank: Blank;\n  whole: number;\n  part1: number;\n  part2: number;\n}\n\nexport function expectedAnswerForQuestion(question: Question): number {\n  switch (question.blank) {\n    case Blank.Whole:\n      return question.whole;\n    case Blank.Part1:\n      return question.part1;\n    case Blank.Part2:\n      return question.part2;\n  }\n}\n\nexport function generateQuestion(\n  max: number,\n  previousQuestion?: Question,\n): Question {\n  const orientation = (() => {\n    let orientation: PartAndWholeOrientation;\n    while (true) {\n      orientation = orientationFromIndex(randomInt(0, 3));\n      if (!previousQuestion || orientation !== previousQuestion.orientation) {\n        break;\n      }\n    }\n\n    return orientation;\n  })();\n\n  const blank = (() => {\n    let blank: Blank;\n    while (true) {\n      const diceRoll = randomInt(0, 2);\n      blank =\n        diceRoll === 0\n          ? Blank.Whole\n          : diceRoll === 1\n          ? Blank.Part1\n          : Blank.Part2;\n      if (!previousQuestion || blank !== previousQuestion.blank) {\n        break;\n      }\n    }\n\n    return blank;\n  })();\n\n  const whole = randomInt(1, max);\n  const part1 = randomInt(0, whole);\n  const part2 = whole - part1;\n\n  return { orientation, blank, whole, part1, part2 };\n}\n","import Header from '@/components/Header';\nimport Keypad from '@/components/keypad/Keypad';\nimport LevelSelector from '@/components/LevelSelector';\nimport PartAndWhole from '@/components/PartAndWhole';\nimport Results from '@/components/Results';\nimport {\n  Blank,\n  expectedAnswerForQuestion,\n  generateQuestion,\n  Question,\n} from '@/util/partWhole/questions';\nimport { navigate } from 'gatsby';\nimport React, { useState } from 'react';\n\nenum Phase {\n  WaitingToStart,\n  InProgress,\n  Results,\n}\n\nconst LEVELS = [9, 20, 99];\n\nconst QUESTIONS_PER_ROUND = 10;\nconst RESULT_FEEDBACK_MS = 2000;\n\nexport default function PartWhole(): JSX.Element {\n  const [phase, setPhase] = useState(Phase.WaitingToStart);\n  const [level, setLevel] = useState<0 | 1 | 2>(2);\n  const [results, setResults] = useState<boolean[]>([]);\n  const [currentQuestion, setCurrentQuestion] = useState<Question | undefined>(\n    undefined,\n  );\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [showingFeedback, setShowingFeedback] = useState(false);\n\n  const maxAnswerDigits = `${LEVELS[level]}`.length;\n\n  function reset() {\n    setPhase(Phase.WaitingToStart);\n    setLevel(0);\n    setResults([]);\n    setCurrentQuestion(undefined);\n    setCurrentGuess('');\n    setShowingFeedback(false);\n  }\n\n  function processGuess() {\n    const expected = expectedAnswerForQuestion(currentQuestion);\n    const answerCorrect = currentGuess === `${expected}`;\n    const questionsAnswered = results.length + 1;\n\n    setResults([...results, answerCorrect]);\n    setShowingFeedback(true);\n    setCurrentGuess(answerCorrect ? 'correct' : 'incorrect');\n\n    setTimeout(() => {\n      if (questionsAnswered < QUESTIONS_PER_ROUND) {\n        setCurrentGuess('');\n        setCurrentQuestion(generateQuestion(LEVELS[level], currentQuestion));\n      } else {\n        setPhase(Phase.Results);\n      }\n\n      setShowingFeedback(false);\n    }, RESULT_FEEDBACK_MS);\n  }\n\n  return (\n    <main>\n      <Header\n        title=\"Parts & Wholes\"\n        backPressed={() => {\n          switch (phase) {\n            case Phase.WaitingToStart:\n              navigate('/');\n              break;\n            case Phase.InProgress:\n            case Phase.Results:\n              reset();\n              break;\n          }\n        }}\n      />\n\n      {phase === Phase.WaitingToStart && (\n        <LevelSelector\n          onPress={(selectedLevel) => {\n            setLevel(selectedLevel);\n            setCurrentQuestion(\n              generateQuestion(LEVELS[selectedLevel], undefined),\n            );\n            setPhase(Phase.InProgress);\n          }}\n        />\n      )}\n\n      {phase === Phase.InProgress && currentQuestion && (\n        <>\n          <PartAndWhole\n            orientation={currentQuestion.orientation}\n            whole={\n              currentQuestion.blank === Blank.Whole\n                ? currentGuess\n                : `${currentQuestion.whole}`\n            }\n            part1={\n              currentQuestion.blank === Blank.Part1\n                ? currentGuess\n                : `${currentQuestion.part1}`\n            }\n            part2={\n              currentQuestion.blank === Blank.Part2\n                ? currentGuess\n                : `${currentQuestion.part2}`\n            }\n          />\n\n          <Keypad\n            keypadDisabled={showingFeedback}\n            deleteDisabled={currentGuess.length === 0}\n            enterDisabled={currentGuess.length === 0}\n            onKeyPress={(key) => {\n              switch (key.type) {\n                case 'number': {\n                  if (\n                    currentGuess.length < maxAnswerDigits &&\n                    currentGuess !== '0'\n                  ) {\n                    setCurrentGuess(`${currentGuess}${key.number}`);\n                  }\n                  break;\n                }\n                case 'delete': {\n                  if (currentGuess.length > 0) {\n                    setCurrentGuess(\n                      currentGuess.slice(0, currentGuess.length - 1),\n                    );\n                  }\n                  break;\n                }\n                case 'enter': {\n                  if (currentGuess.length > 0) {\n                    processGuess();\n                  }\n                  break;\n                }\n              }\n            }}\n          />\n        </>\n      )}\n\n      {phase === Phase.Results && (\n        <Results\n          results={results}\n          outOf={QUESTIONS_PER_ROUND}\n          onPlayAgainPressed={reset}\n        />\n      )}\n    </main>\n  );\n}\n"],"sourceRoot":""}